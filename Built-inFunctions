/*
    Problem 1. Find Names of All Employees by First Name
*/

SELECT FirstName, LastName
FROM Employees
WHERE FirstName LIKE 'sa%'

/*
    Problem 2. Find Names of All Employees by Last Name
*/

SELECT FirstName, LastName
FROM Employees
WHERE LastName LIKE '%ei%'

/*
    Problem 3. Find First Names of All Employess
*/

SELECT FirstName
FROM Employees
WHERE DepartmentId IN(3, 10) AND DATEPART (YEAR, HireDate) BETWEEN 1995 AND 2005

/*
    Problem 4. Find All Employees Except Engineers
*/

SELECT FirstName, LastName
FROM Employees
WHERE JobTitle NOT LIKE '%engineer%'

/*
    Problem 5. Find Towns with Name Length
*/

SELECT Name
FROM Towns
WHERE LEN(Name) = 5 OR LEN(Name) = 6
ORDER BY Name

/*
    Problem 6. Find Towns Starting With
*/

SELECT TownId, Name
FROM Towns
WHERE Name LIKE '[MKBE]%'
ORDER BY Name

/*
    Problem 7. Find Towns Not Starting With
*/

SELECT TownId, Name
FROM Towns
WHERE Name LIKE '[^RBD]%'
ORDER BY Name

/*
    Problem 8. Create View Employees Hired After
*/

CREATE VIEW V_EmployeesHiredAfter2000 
AS
SELECT FirstName, LastName
FROM Employees
WHERE DATEPART (YEAR, HireDate) > 2000

/*
    Problem 9. Length of Last Name
*/

SELECT FirstName, LastName
FROM Employees
WHERE LEN(LastName) = 5

/*
    Problem 10. Rank Employees by Salary
*/

SELECT EmployeeId, FirstName, LastName, Salary,
DENSE_RANK() OVER (PARTITION BY Salary ORDER BY EmployeeId) AS [RANK]
FROM Employees
WHERE Salary BETWEEN 10000 AND 50000
ORDER BY Salary DESC

/*
    Problem 11. Find All Employees with Rank 2
*/

SELECT * FROM (SELECT EmployeeId, FirstName, LastName, Salary,
DENSE_RANK() OVER (PARTITION BY Salary ORDER BY EmployeeId) AS [RANK]
FROM Employees
WHERE Salary BETWEEN 10000 AND 50000) AS Temp
WHERE Temp.[Rank] = 2
ORDER BY Salary DESC

/*
    Problem 12. Countries Holding 'A'
*/

SELECT CountryName,
       IsoCode AS [ISO Code]
FROM Countries
WHERE CountryName LIKE '%a%a%a%'
ORDER BY IsoCode;

/*
    Problem 13. Mix of Peak and River Names
*/

SELECT Peaks.PeakName,
	   Rivers.RiverName,
       LOWER(CONCAT(LEFT(Peaks.PeakName, LEN(Peaks.PeakName)-1), Rivers.RiverName)) AS Mix
FROM Peaks
	   JOIN Rivers ON RIGHT(Peaks.PeakName,1) = LEFT(Rivers.RiverName,1)
ORDER BY MIX

/*
    Problem 14. Games From 2011 and 2012 Year
*/

SELECT TOP(50) Name,
FORMAT(CAST(Start AS DATE), 'yyyy-MM-dd') AS [Start]
FROM Games
WHERE DATEPART(YEAR, Start) BETWEEN 2011 AND 2012
ORDER BY Start,
		 Name

/*
    Problem 15. User Email Providers
*/

SELECT Username,
       RIGHT(Email, LEN(Email)-CHARINDEX('@', Email)) AS [Email Provider]
FROM Users
ORDER BY [Email Provider],
         Username;

/*
    Problem 16. Get Users with IPAddress Like Pattern
*/

SELECT Username,
       IpAddress AS [IP Address]
FROM Users
WHERE IpAddress LIKE '___.1_%._%.___'
ORDER BY Username;

/*
    Problem 17. Show All Games with Duration
*/

SELECT Name AS [Game],
       CASE
           WHEN DATEPART(HOUR, Start) BETWEEN 0 AND 11
           THEN 'Morning'
           WHEN DATEPART(HOUR, Start) BETWEEN 12 AND 17
           THEN 'Afternoon'
           WHEN DATEPART(HOUR, Start) BETWEEN 18 AND 23
           THEN 'Evening'
           ELSE 'N\A'
       END AS [Part of the Day],
       CASE
           WHEN Duration <= 3
           THEN 'Extra Short'
           WHEN Duration BETWEEN 4 AND 6
           THEN 'Short'
           WHEN Duration > 6
           THEN 'Long'
           WHEN Duration IS NULL
           THEN 'Extra Long'
           ELSE 'Error - must be unreachable case'
       END AS [Duration]
FROM Games
ORDER BY Name,
         [Duration],
         [Part of the Day]; 

/*
    Problem 18. Orders Table
*/

SELECT ProductName,
       OrderDate,
       DATEADD(DAY, 3, OrderDate) AS [Pay Due],
       DATEADD(MONTH, 1, OrderDate) AS [Deliver Due]
FROM Orders;
