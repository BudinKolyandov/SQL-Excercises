/*
    Problem 1.	Employee Addres
*/

SELECT TOP(5) 
	e.EmployeeID, 
	e.JobTitle, 
	e.AddressID, 
	a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON e.AddressID = a.AddressID
ORDER BY AddressID

/*
    Problem 2.	Addresses with Towns
*/

SELECT TOP(50) 
	e.FirstName, 
	e.LastName, 
	t.Name, 
	a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON e.AddressID = a.AddressID
JOIN Towns AS t ON A.TownId = t.TownID
ORDER BY e.FirstName,
		 e.LastName;
     
/*
    Problem 3. Sales Employees
*/

SELECT TOP(50) 
	e.EmployeeID,
	e.FirstName, 
	e.LastName, 
	d.Name AS [DepartmentName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'
ORDER BY e.EmployeeID

/*
    Problem 4. Employee Departments
*/

SELECT TOP(5) 
	e.EmployeeID,
	e.FirstName, 
	e.Salary, 
	d.Name AS [DepartmentName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE e.Salary > 15000
ORDER BY e.DepartmentID

/*
    Problem 5. Employees Without Projects
*/

SELECT TOP(3) 
	e.EmployeeID,
	e.FirstName
FROM Employees AS e
LEFT OUTER JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
WHERE ep.ProjectID IS NULL
ORDER BY e.EmployeeID

/*
    Problem 6. Employees Hired After
*/

SELECT
	e.FirstName,
	e.LastName,
	e.HireDate,
	d.Name AS [DeptName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE e.HireDate > 01/01/1999 AND d.Name IN ('Sales','Finance')
ORDER BY e.HireDate

/*
    Problem 7. Employees With Project
*/

SELECT TOP(5)
	e.EmployeeID,
	e.FirstName,
	p.Name
FROM Employees AS e
INNER JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
INNER JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE p.StartDate > 13/08/2002 AND p.EndDate IS NULL
ORDER BY e.EmployeeID

/*
    Problem 8. Employee 24
*/

SELECT
	e.EmployeeID,
	e.FirstName,
	CASE
		WHEN p.StartDate > '01/01/2005' THEN NULL
		ELSE p.Name
		END
FROM Employees AS e
INNER JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
INNER JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE e.EmployeeID = 24

/*
    Problem 9. Employee 24
*/

SELECT
	e.EmployeeID,
	e.FirstName,
	e.ManagerID,
	m.FirstName
FROM Employees AS e
INNER JOIN Employees AS m ON e.ManagerID = m.EmployeeID
WHERE e.ManagerID IN ('3', '7')
ORDER BY e.EmployeeID

/*
    Problem 10. Employees Summary
*/

SELECT TOP (50)
	e.EmployeeID,
	e.FirstName +' '+ e.LastName AS [EmployeeName],	
	m.FirstName + ' '+ m.LastName AS [ManagerName],
	d.Name AS [DepartmentName]
FROM Employees AS e
INNER JOIN Employees AS m ON e.ManagerID = m.EmployeeID
INNER JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
ORDER BY e.EmployeeID

/*
    Problem 11. Min Average Salary
*/

SELECT TOP (1) (
SELECT AVG(Salary)) AS MinAverageSalary
FROM Employees
GROUP BY DepartmentID
ORDER BY MinAverageSalary

/*
    Problem 12. Highest Peaks in Bulgaria    
*/

SELECT 
	mc.CountryCode,
	m.MountainRange,
	p.PeakName,
	p.Elevation
FROM Mountains AS m
INNER JOIN MountainsCountries AS mc ON  m.Id = mc.MountainId
INNER JOIN Peaks AS p ON  m.Id = p.MountainId
WHERE p.Elevation > 2835
AND mc.CountryCode = 'BG'
ORDER BY Elevation DESC

/*
    Problem 13. Count Mountain Ranges  
*/

SELECT 
	mc.CountryCode,
	COUNT(m.MountainRange)
FROM Mountains AS m
INNER JOIN MountainsCountries AS mc ON  m.Id = mc.MountainId
WHERE mc.CountryCode IN ('BG', 'RU', 'US')
GROUP BY mc.CountryCode

/*
    Problem 14. Countries With or Without Rivers  
*/

SELECT TOP (5)
	c.CountryName,
	r.RiverName
FROM Countries AS c
LEFT OUTER JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
LEFT OUTER JOIN Rivers AS r ON r.Id = cr.RiverId
WHERE C.ContinentCode = 'AF'
ORDER BY C.CountryName

/*
    Problem 15. Continents and Currencies
*/

SELECT 
	rc.ContinentCode, 
	rc.CurrencyCode,
	rc.Count AS [CurrencyUsage]
FROM
(SELECT 
	c.ContinentCode, 
	c.CurrencyCode, 
	COUNT(c.CurrencyCode) AS [Count], 
	DENSE_RANK() OVER (PARTITION BY c.ContinentCode ORDER BY COUNT(c.CurrencyCode) DESC) AS [rank] 
FROM Countries AS c
GROUP BY c.ContinentCode, c.CurrencyCode) AS rc
WHERE rc.rank = 1 AND rc.Count > 1

/*
    Problem 16. Countries Without any Mountains
*/

SELECT
	COUNT (c.CountryCode) AS [CountryCode]
FROM  Countries AS c
LEFT OUTER JOIN  MountainsCountries AS mc ON c.CountryCode = mc.CountryCode 
WHERE mc.MountainId IS NULL

/*
    Problem 17. Highest Peak and Longest River by Country
*/

SELECT TOP (5)
	c.CountryName,
	MAX(p.Elevation) AS [HighestPeakElevation],
	MAX(r.Length) AS [LongestRiverLength]
FROM  Countries AS c
LEFT OUTER JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
LEFT OUTER JOIN Peaks AS p ON p.MountainId = mc.MountainId
LEFT OUTER JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
LEFT OUTER JOIN Rivers AS r ON cr.RiverId = r.Id
GROUP BY c.CountryName
ORDER BY HighestPeakElevation DESC,
		LongestRiverLength DESC,
		c.CountryName;
		
/*
    Problem 18. Highest Peak Name and Elevation by Country
*/

SELECT TOP (5)
	c.CountryName,
	ISNULL(p.PeakName, '(no highest peak)') AS 'HighestPeakName',
	ISNULL(MAX(p.Elevation), 0) AS 'HighestPeakElevation',
	ISNULL(m.MountainRange, '(no mountain)')
FROM  Countries AS c
LEFT OUTER JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
LEFT OUTER JOIN Peaks AS p ON p.MountainId = mc.MountainId
LEFT OUTER JOIN Mountains AS m ON m.Id = mc.MountainId
GROUP BY c.CountryName, p.PeakName, m.MountainRange
ORDER BY c.CountryName, p.PeakName
