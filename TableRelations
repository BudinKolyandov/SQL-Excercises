/*
    Problem 1. One-To-One Relationship
*/

CREATE TABLE Persons
(	PersonID INT PRIMARY KEY IDENTITY,
	FirstName VARCHAR(50),
	Salary Decimal,
	PassportID INT
)

CREATE TABLE Passports
(	PassportID INT PRIMARY KEY,
	PassportNumber VARCHAR(50),
)

INSERT INTO Persons (FirstName, Salary, PassportID)
VALUES ('Roberto', '43300.00', '102'),
	   ('Tom', '56100.00', '103'),
	   ('Yana', '60200.00', '101');

INSERT INTO Passports (PassportID, PassportNumber)
VALUES ('101', 'N34FG21B'),
	   ('102', 'K65LO4R7'),
	   ('103', 'ZE657QP2');

ALTER TABLE Persons
ADD FOREIGN KEY (PassportID) REFERENCES Passports(PassportID)

/*
    Problem 2. One-To-Many Relationship
*/

CREATE TABLE Models
(	ModelID INT PRIMARY KEY,
	Name VARCHAR(50),
	ManufacturerID INT
)

CREATE TABLE Manufacturers
(	ManufacturerID INT PRIMARY KEY IDENTITY,
	Name VARCHAR(50),
	EstablishedOn DATE
)

INSERT INTO Models (ModelID, Name, ManufacturerID)
VALUES ('101', 'X1', '1'),
	   ('102', 'i6', '1'),
	   ('103', 'Model S', '2'),
	   ('104', 'Model X', '2'),
	   ('105', 'Model 3', '2'),
	   ('106', 'Nova', '3')
	   ;

INSERT INTO Manufacturers (Name, EstablishedOn)
VALUES ('BMW', '07/03/1916'),
	   ('Tesla', '01/01/2003'),
	   ('Lada', '01/05/1966');

ALTER TABLE Models
ADD FOREIGN KEY (ManufacturerID) REFERENCES Manufacturers(ManufacturerID)

/*
    Problem 3. Many-To-Many Relationship
*/

CREATE TABLE Students(
	StudentID INT PRIMARY KEY IDENTITY,
	Name VARCHAR(50));

CREATE TABLE Exams(
	ExamID INT PRIMARY KEY,
	Name VARCHAR(50));

CREATE TABLE StudentsExams(
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
	ExamID INT FOREIGN KEY REFERENCES Exams(ExamID),
	PRIMARY KEY(StudentID, ExamID));

INSERT INTO Students (Name)
VALUES ('Mila'),
	   ('Toni'),
	   ('Ron');

INSERT INTO Exams (ExamID, Name)
VALUES ('101', 'SpringMVC'),
	   ('102', 'Neo4j'),
	   ('103', 'Oracle 11g');


INSERT INTO StudentsExams (StudentID, ExamID)
VALUES ('1', '101'),
	   ('1', '102'),
	   ('2', '101'),
	   ('3', '103'),
	   ('2', '102'),
	   ('2', '103');
	   
/*
    Problem 4. Self-Referencing
*/

CREATE TABLE Teachers(
	TeacherID INT PRIMARY KEY,
	Name VARCHAR(50),
	ManagerID INT FOREIGN KEY REFERENCES Teachers(TeacherID));

INSERT INTO Teachers (TeacherID, Name, ManagerID)
VALUES ('101', 'John', NULL),
	   ('102', 'Maya', 106),
	   ('103', 'Silvia', 106),
	   ('104', 'Ted', 105),
	   ('105', 'Mark', 101),
	   ('106', 'Greta', 101);
	   
/*
    Problem 5. Online Store Database
*/

CREATE DATABASE OnlineStoreDatabase

GO;

USE OnlineStoreDatabase

CREATE TABLE Cities(
	CityID INT PRIMARY KEY,
	Name VARCHAR(50)
);

CREATE TABLE Customers(
	CustomerID INT PRIMARY KEY,
	Name VARCHAR(50),
	Birthday DATE,
	CityID INT FOREIGN KEY REFERENCES Cities (CityID)
);

CREATE TABLE Orders(
	OrderID INT PRIMARY KEY,
	CustomerID INT FOREIGN KEY REFERENCES Customers(customerID)
);

CREATE TABLE ItemTypes(
	ItemTypeID INT PRIMARY KEY,
	Name VARCHAR(50)
);

CREATE TABLE Items(
	ItemID INT PRIMARY KEY,
	Name VARCHAR(50),
	ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes(ItemTypeID)
);

CREATE TABLE OrderItems(
	OrderID INT FOREIGN KEY REFERENCES Orders(OrderID),
	ItemID INT FOREIGN KEY REFERENCES Items(ItemID),
	PRIMARY KEY (OrderID, ItemID)
);

/*
    Problem 6. University Database
*/

CREATE DATABASE UniversityDatabase

GO;

USE UniversityDatabase

CREATE TABLE Majors(
	MajorID INT PRIMARY KEY,
	Name VARCHAR(50)
);

CREATE TABLE Students(
	StudentID INT PRIMARY KEY,
	StudentNumber VARCHAR(50),
	StudentName VARCHAR(50),
	MajorID INT FOREIGN KEY REFERENCES Majors(MajorID)
);

CREATE TABLE Payments(
	PaymentID INT PRIMARY KEY,
	PaymentDate DATE,
	PaymentAmount MONEY,
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID)
);

CREATE TABLE Subjects(
	SubjectID INT PRIMARY KEY,
	SubjectName VARCHAR(50)
);

CREATE TABLE Agenda(
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
	SubjectID INT FOREIGN KEY REFERENCES Subjects(SubjectID),
	PRIMARY KEY(StudentID, SubjectID)
);

/*
    Problem 9. Peaks in Rila
*/

SELECT 
(SELECT MountainRange 
FROM Mountains 
WHERE MountainRange = 'Rila') 
AS MountainRange , PeakName, Elevation
FROM Peaks
WHERE MountainId = 
(SELECT Id 
FROM Mountains 
WHERE MountainRange = 'Rila')
ORDER BY Elevation DESC
